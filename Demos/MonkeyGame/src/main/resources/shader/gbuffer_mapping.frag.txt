#version 330 core

#define PI 3.14159265359

#define MAX_LIGHT 10

//vec3
uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedo;

//float(only RED)
uniform sampler2D gMetallic;
uniform sampler2D gRoughness;
uniform sampler2D gAmbientOcclusion;

out vec4 FragColor;

in vec2 pos;

struct PointLight {
	vec3 position;
	
    vec3 color;
	
	float radius;
	
	samplerCube depth;
};

struct DirLight {
    vec3 direction;
  
    vec3 color;
	
	sampler2D depth;
	
	mat4 lightSpaceMatrix;
};

struct Color {
    vec3   position;
    vec3   normal;
    vec3   albedo;
	
    float  metallic;
    float  roughness;
};

vec2 ParallaxMapping(vec2 texCoords, vec3 viewDir);

float DistributionGGX(vec3 normal, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 normal, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness);
vec3 fresnelSchlick(float cosTheta, vec3 F0);

float ShadowCalculationDirection(int i, float bias, Color col);
float ShadowCalculationPoint(int i, float bias, Color col);

vec3 CalcLight(Color color, vec3 V, vec3 F0, vec3 L, vec3 light_diffuse);

uniform PointLight point_light[MAX_LIGHT];
uniform int point_light_count;

uniform DirLight dir_light[MAX_LIGHT];
uniform int dir_light_count;

uniform vec3 viewPos;

void main()
{
	Color col;
	
	col.position = texture(gPosition, pos).xyz;
	col.normal = texture(gNormal, pos).xyz;
	
	col.albedo = texture(gAlbedo, pos).rgb;
	
	col.metallic = texture(gMetallic, pos).r;
	col.roughness = texture(gRoughness, pos).r;
	
	vec3 V = normalize(viewPos - col.position);
	vec3 F0 = vec3(0.04); 
	F0 = mix(F0, col.albedo, col.metallic);
	
	vec3 Lo = vec3(0.0);
	
	for(int i = 0; i < point_light_count; ++i) 
	{
		vec3 L = (point_light[i].position - col.position);
		float dis = length(L);
		L /= dis;
		float bias = max(0.005 * (1.0 - dot(col.normal, L)), 0.0005);
		
		Lo += (1 - ShadowCalculationPoint(i, bias, col)) * CalcLight(col, V, F0, L, point_light[i].color);
		//Lo += 1 - ShadowCalculationPoint(i, bias, col);
	}
	
	for(int i = 0; i < dir_light_count; ++i) 
	{	
		vec3 L = -dir_light[i].direction;
		float bias = max(0.05 * (1.0 - dot(col.normal, L)), 0.005);
	
		Lo += (1 - ShadowCalculationDirection(i, bias, col)) * CalcLight(col, V, F0, L, dir_light[i].color) / 2;
		//Lo += 1 - ShadowCalculationDirection(i, bias, col);
	}
	
    float ao = texture(gAmbientOcclusion, pos).r;
	vec3 ambient = vec3(.1) * col.albedo * ao;
   
	//ambient *= 0;
   
    FragColor = vec4(ambient + Lo, 1);
}

//----------------------------------------------------------------------------------------------------------------------------------------
float DistributionGGX(vec3 normal, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a * a;
    float NdotH  = max(dot(normal, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}

float GeometrySmith(vec3 normal, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(normal, V), 0.0);
    float NdotL = max(dot(normal, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}
//----------------------------------------------------------------------------------------------------------------------------------------
vec3 CalcLight(Color color, vec3 V, vec3 F0, vec3 L, vec3 light_diffuse)
{
	vec3 normal = color.normal;
	vec3 albedo = color.albedo;
	float roughness = color.roughness;
	float metallic = color.metallic;

	vec3 H = normalize(V + L);
	
	vec3 radiance     = light_diffuse;        
	
	// Cook-Torrance BRDF
	float NDF = DistributionGGX(normal, H, roughness);        
	float G   = GeometrySmith(normal, V, L, roughness);      
	vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);       
	
	vec3 kD = (1 - F) * (1 - metallic);
	
	vec3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(normal, V), 0.0) * max(dot(normal, L), 0.0);
	vec3 specular     = numerator / max(denominator, 0.001);
	
	// прибавляем результат к исходящей энергетической Яркости Lo
	return (kD * albedo / PI + specular) * radiance;
}
//----------------------------------------------------------------------------------------------------------------------------------------

float ShadowCalculationDirection(int i, float bias, Color col)
{
	#define FRESH 0
	
	//if(dot(col.normal, dir_light[i].direction) > 0) return 1;
	//if(dot(col.originalNormal, dir_light[i].direction) > 0) return 1;

	vec4 vec = dir_light[i].lightSpaceMatrix * vec4(col.position, 1.0);

    vec3 projCoords = (vec.xyz / vec.w) * 0.5 + 0.5;
		
	float currentDepth = projCoords.z - bias;
	
	if(currentDepth > 1.0) return 0;
	if(currentDepth < 0.0) return 0;

	float shadow1 = 1;
	{	
		float d = dot(col.normal, dir_light[i].direction);
		//if(d < 0) shadow1 += d;
		if(d < 0) shadow1 -= pow(-d, 1/5.0);
	}
	
	//shadow1 = 0;
	
	vec2 texelSize = 1.0 / textureSize(dir_light[i].depth, 0);
	
	float shadow = 0;
	
	for(int x = -FRESH; x <= FRESH; ++x)
		for(int y = -FRESH; y <= FRESH; ++y)
		{
			float closestDepth = texture(dir_light[i].depth, projCoords.xy + vec2(x, y) * texelSize).r;
			shadow += currentDepth > closestDepth ? 1.0 : shadow1;			
		}
		
	return shadow / ((2*FRESH+1)*(2*FRESH+1));

	#undef FRESH
}


float ShadowCalculationPoint(int i, float bias, Color col)
{	
	//#define FRESH

	float shadow = 1;

    vec3 fragToLight = col.position - point_light[i].position;
	float disFragToLight = length(fragToLight);
	
    float currentDepth = disFragToLight / point_light[i].radius - bias;
	
	if(currentDepth > 1) return 1;
	
	{
		float d = dot(col.normal, fragToLight / disFragToLight);
		if(d < 0) shadow = 1 + d;
	}
	
	#ifndef FRESH
		float closestDepth = texture(point_light[i].depth, fragToLight).r;
		return currentDepth > closestDepth ? 1.0 : shadow;
	#else
		
		#define samples 20
		
		const vec3 sampleOffsetDirections[samples] = vec3[]
		(
		   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
		   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
		   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
		   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
		   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
		);  
	
		shadow *= samples;
	
		float viewDistance = length(viewPos - col.position);
		float diskRadius = (1.0 + (viewDistance / point_light[i].radius)) / 25;
		for(int i = 0; i < samples; ++i)
		{
			float closestDepth = texture(point_light[i].depth, fragToLight + sampleOffsetDirections[i] * diskRadius).r;
			if(currentDepth > closestDepth)
				shadow += 1.0;
		}
		return shadow / samples;
	#endif
	
	#undef FRESH
	
}  