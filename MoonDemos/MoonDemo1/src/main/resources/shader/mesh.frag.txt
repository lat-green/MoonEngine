#version 330 core

out vec4 FragColor;

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;

struct PointLight {
	vec3 position;
	
    vec3 diffuse;
    vec3 specular;
};

struct DirLight {
    vec3 direction;
  
    vec3 diffuse;
    vec3 specular;
};  

struct Material {
    sampler2D  diffuse;
    sampler2D  specular;
    float shininess;
};

uniform Material material;

vec3 CalcDirLight(DirLight light, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 viewDir);

#define MAX_LIGHT 10

uniform PointLight point_light[MAX_LIGHT];
uniform int count_point_light;

uniform DirLight dir_light[MAX_LIGHT];
uniform int count_dir_light;

uniform vec3 viewPos;

void main()
{
	vec3 viewDir = normalize(viewPos - FragPos);
	
	vec3 result = vec3(0);
	
	for(int i = 0; i < count_point_light; i++)
		result += CalcPointLight(point_light[i], viewDir);
	
	for(int i = 0; i < count_dir_light; i++)
		result += CalcDirLight(dir_light[i], viewDir);
    
    FragColor = vec4(result, 1.0);
} 

vec3 CalcPointLight(PointLight light, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - FragPos);
    
    // ��������� ���������
    float diff = max(dot(Normal, lightDir), 0.0);
    
    // ��������� ���������� ������
    vec3 reflectDir = reflect(-lightDir, Normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
      
    // ����������� ����������
    vec3 ambient  = 0.5f  * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    
    return (ambient + diffuse + specular);
} 

vec3 CalcDirLight(DirLight light, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // ��������� ���������
    float diff = max(dot(Normal, lightDir), 0.0);
    // ��������� ���������� ������
    vec3 reflectDir = reflect(-lightDir, Normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // ����������� ����������
    vec3 ambient  = 0.5f  * vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));
    return (ambient + diffuse + specular);
}